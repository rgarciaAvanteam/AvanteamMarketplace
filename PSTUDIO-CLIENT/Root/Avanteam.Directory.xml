<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Avanteam.Directory</name>
    </assembly>
    <members>
        <member name="M:Avanteam.Application.Security.APSUser.AccessRightsControl(System.String,Avanteam.Kernel.UserInfo,Avanteam.Application.Security.AccessMode[])">
            <summary>
            Vérifie que l'utilisateur a le droits d'utilisation de la ressource. Table AccessRights.
            </summary>
            <param name="controledRessourceId">id de la ressource.</param>
            <param name="user">utilisateur à contrôler.</param>
            <param name="modes">Modes d'accès à contrôler.</param>
        </member>
        <member name="T:Avanteam.Application.Security.EmailPreference">
            <summary>
            Préférences de l’utilisateur concernant la fréquence des emails que l’application lui envoit.
            </summary>
        </member>
        <member name="F:Avanteam.Application.Security.EmailPreference.Direct">
            <summary>
            Envoi immédiat.
            </summary>
        </member>
        <member name="F:Avanteam.Application.Security.EmailPreference.Day">
            <summary>
            Un email récapitulatif par jour.
            </summary>
        </member>
        <member name="F:Avanteam.Application.Security.EmailPreference.Week">
            <summary>
            Un email récapitulatif par semaine.
            </summary>
        </member>
        <member name="F:Avanteam.Application.Security.EmailPreference.Month">
            <summary>
            Un email récapitulatif par mois.
            </summary>
        </member>
        <member name="F:Avanteam.Application.Security.EmailPreference.Never">
            <summary>
            Aucun email.
            </summary>
        </member>
        <member name="T:Avanteam.Application.Security.ServiceAccessPropagationMode">
            <summary>
            Définition des règles de gestion des droits d'accès aux services.
            </summary>
        </member>
        <member name="F:Avanteam.Application.Security.ServiceAccessPropagationMode.ServiceOnly">
            <summary>
            Acces limités aux seuls membres du service.
            </summary>
        </member>
        <member name="F:Avanteam.Application.Security.ServiceAccessPropagationMode.ServiceAndSubServices">
            <summary>
            Acces étendus aux membres du service et aux membres des sous-services.
            </summary>
        </member>
        <member name="F:Avanteam.Application.Security.ServiceAccessPropagationMode.ServiceAndParentServices">
            <summary>
            Accés étendus aux membres du service et aux membres des services parents.
            </summary>
        </member>
        <member name="F:Avanteam.Application.Security.ServiceAccessPropagationMode.AllServices">
            <summary>
            Accès étendus aux membres du service, aux membres des sous-services et aux membres des services parents.
            </summary>
        </member>
        <member name="T:Avanteam.Application.Security.User">
            <summary>
            This class represent a user in PStudio.
            </summary>
        </member>
        <member name="M:Avanteam.Application.Security.User.#ctor(System.String,Avanteam.Directory.Components.Authentication)">
            <summary>
            Initializes a new instance of the <see cref="T:Avanteam.Application.Security.User"/> class.
            Create and load a user definition.
            </summary>
            <param name="name">
            A unique name of the user to find it back in our database.
            Search is done in function of the <paramref name="authentication"/> parameter.
            </param>
            <param name="authentication">Security level.</param>
        </member>
        <member name="M:Avanteam.Application.Security.User.#ctor(System.String,Avanteam.Directory.Components.Authentication,Avanteam.Directory.DataSource.DirectoryManagerWrapper,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avanteam.Application.Security.User"/> class.
            Create and load a user definition.
            </summary>
            <param name="name">
            A unique name of the user to find it back in our database.
            Search is done in function of the <paramref name="authentication"/> parameter.
            </param>
            <param name="authentication">Security level.</param>
            <param name="dataSource">L'instance de <see cref="T:Avanteam.Directory.DataSource.DirectoryManagerWrapper"/> à utiliser. Si null, une nouvelle instance sera crée.</param>
            <param name="loginName">
            Login name of the user to use to validate password.
            If null, the <paramref name="name"/> parameter will be used for that.
            </param>
        </member>
        <member name="M:Avanteam.Application.Security.User.#ctor(Avanteam.Directory.DataSource.DirectoryManagerWrapper,System.String,Avanteam.Directory.Components.Authentication)">
            <summary>
            Initializes a new instance of the <see cref="T:Avanteam.Application.Security.User"/> class.
            Create and load a user definition.
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.User.IsValide">
            <summary>
            Gets a value indicating whether the user is valid (exists in the DB).
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.User.WithDelegation">
            <summary>
            Gets or sets a value indicating whether the FullDefinition, Roles, Groups, Services
            properties must return inherited values from Delegation.
            Default is True.
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.User.Id">
            <summary>
            Gets or sets the unique Id of this user.
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.User.Roles">
            <summary>
            Gets the list of roles of this user.
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.User.Groups">
            <summary>
            Gets the list of groups of this user.
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.User.Services">
            <summary>
            Gets the list of services of this user.
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.User.SocieteServices">
            <summary>
            Gets the list of services attache to societe of this user.
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.User.Societes">
            <summary>
            Gets the list of companies of this user.
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.User.Societe">
            <summary>
            Gets the company of the user (default if multiple).
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.User.Abonnements">
            <summary>
            Gets the list of subscriptions of the user.
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.User.Delegations">
            <summary>
            Gets the full history of delagations and substitution.
            </summary>
        </member>
        <member name="M:Avanteam.Application.Security.User.AllDelegatesByApp">
            <summary>
            List of all delegates by application name
            Return a list of UserDelegate.
            </summary>
            <returns>[UserDelegate].</returns>
        </member>
        <member name="P:Avanteam.Application.Security.User.AllSubstitutes">
            <summary>
            Gets the list of all the active delegates for a given Application:
            Permanent delegates
            Substitutes (temporary).
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.User.Delegatees">
            <summary>
            Gets the list of delegates (ex permanent) for an Application.
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.User.Substitutes">
            <summary>
            Gets the list of substitutes (ex temporary).
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.User.FullDefinition">
            <summary>
            Gets a list containing the full definition of the user.
            ie:
              id
              FullName
              Group1
              Group2
              ...
              Role1
              Role2
              ...
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.User.FullDelegationDefinition">
            <summary>
            Gets the list of delegates (temporary and permanent + recursive inheritance).
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.User.FullPermanentDelegationDefinition">
            <summary>
            Gets the full list of permanent delegations (permanentes + recursive inheritance).
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.User.AccessLevel">
            <summary>
            Gets the access level for the user.
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.User.DirectoryDataSource">
            <summary>
            Gets or sets the directory DataSource used to query this user.
            </summary>
            <remarks>
            This property is reset after serialization and desensitization.
            </remarks>
        </member>
        <member name="M:Avanteam.Application.Security.User.TryGetPicture(System.Byte[]@)">
            <summary>
            Obtenir la photo de l'utilisateur si elle a été définie.
            </summary>
            <param name="pictureBytes">tableau de bytes dans lequel sera retournée la photo de l'utilisateur à la sortie de la méthode.</param>
            <returns>true en cas de succès.</returns>
        </member>
        <member name="M:Avanteam.Application.Security.User.SetPicture(System.Byte[],System.Boolean)">
            <summary>
            Change la photo de l'utilisateur.
            </summary>
            <param name="pictureBytes">tableau de byte de la photo.</param>
            <param name="resize">retaille la photo, 128*128 max avec respect des proportions (true par défaut).</param>
        </member>
        <member name="M:Avanteam.Application.Security.User.ResizePicture(System.Byte[])">
            <summary>
            Redimensionne une image au format attendu pour la photo de l'utilisateur.
            </summary>
            <param name="pictureBytes">tableau de byte de la photo.</param>
            <returns>la photo redimensionnée.</returns>
        </member>
        <member name="M:Avanteam.Application.Security.UserLocks.BatchEnable(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Activate users in bulk (only those who need it).
            </summary>
            <param name="users">Reference list of users.</param>
        </member>
        <member name="M:Avanteam.Application.Security.UserLocks.BatchDisable(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Disable users in bulk (only those who need it).
            </summary>
            <param name="userFullNames">Reference list of users.</param>
        </member>
        <member name="M:Avanteam.Application.Security.UserLocks.IncBadPassword">
            <summary>
            Increment the bad password counter, return the new user status (true=lock, false=not locked).
            </summary>
        </member>
        <member name="M:Avanteam.Application.Security.UserLocks.Disable">
            <summary>
            Disable user.
            </summary>
        </member>
        <member name="M:Avanteam.Application.Security.UserLocks.Enable">
            <summary>
            Enable user if not locked.
            </summary>
        </member>
        <member name="M:Avanteam.Application.Security.UserLocks.FormatText(System.String)">
            <summary>
            Format the text.
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.UserLocks.Resource">
            <summary>
            Gets the resource to lock / unlock / query locks.
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.UserLocks.LockState">
            <summary>
            Gets the account lock status.
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.UserLocks.IsLockingEnabled">
            <summary>
            Gets a value indicating whether locking is enabled.
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.UserLocks.MaxBadPasswordAllowed">
            <summary>
            Gets the number of bad password allowed before locking.
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.UserLocks.EmailSender">
            <summary>
            Gets the name of the sender of emails.
            </summary>
        </member>
        <member name="P:Avanteam.Application.Security.UserLocks.DirectoryDataSource">
            <summary>
            Gets or sets the directory DataSource used to query this user.
            </summary>
        </member>
        <member name="T:Avanteam.Application.Security.UserOrigin">
            <summary>
            Mode d'authentification d'un utilisateur.
            </summary>
        </member>
        <member name="F:Avanteam.Application.Security.UserOrigin.Undefined">
            <summary>
            Mode d'authentification indéfinie.
            </summary>
        </member>
        <member name="F:Avanteam.Application.Security.UserOrigin.Ldap">
            <summary>
            Mode d'authentification de type LDAP (appelée aussi « Réseau »).
            </summary>
        </member>
        <member name="F:Avanteam.Application.Security.UserOrigin.Application">
            <summary>
            Mode d'authentification de type application.
            </summary>
        </member>
        <member name="M:Avanteam.Application.Security.DataSource.ISecurityDataSource.AccessRightsLoad(System.Int32,System.String)">
            <summary>
            Load the AccessRight definition for this id.
            </summary>
            <param name="type">The type of object.</param>
            <param name="id">Unique id of the object.</param>
        </member>
        <member name="M:Avanteam.Application.Security.DataSource.ISecurityDataSource.AccessRightsReplace(System.Int32,System.String,System.Collections.Generic.List{Avanteam.Application.Security.AccessRight})">
            <summary>
            Update or create the accessRights table for this id and type.
            </summary>
            <param name="type">The type of object.</param>
            <param name="id">Unique id  of th etarget object.</param>
            <param name="accessRights">List of accessRights to apply.</param>
        </member>
        <member name="M:Avanteam.Application.Security.DataSource.SecurityDataSource.AccessRightsLoad(System.String)">
            <summary>
            Load the AccessRights associated with a target object.
            </summary>
        </member>
        <member name="M:Avanteam.Application.Security.DataSource.SecurityDataSource.AccessRightsFilter(System.Int32,System.Collections.Generic.ICollection{System.String},Avanteam.Application.Security.User,System.Int32)">
            <summary>
            Filter the Ids collection of the specified type for the user and requested mode.
            </summary>
            <param name="type">Type of objects Ids (use -1 or null if unknown).</param>
            <param name="ids">Collection of unique ids.</param>
            <param name="user">Definition of user.</param>
            <param name="mode">AccessMode filter.</param>
        </member>
        <member name="M:Avanteam.Application.Security.DataSource.SecurityDataSource.AccessRightsFilter(System.Int32,System.String,Avanteam.Application.Security.User,Avanteam.Application.Security.AccessMode)">
            <summary>
            Filter this Id of the specified type for the user and requested mode.
            </summary>
        </member>
        <member name="M:Avanteam.Application.Security.DataSource.SecurityDataSource.AccessRightsFilter(System.Int32,System.String,Avanteam.Application.Security.User,System.Int32)">
            <summary>
            Filter this Id of the specified type for the user and requested mode.
            </summary>
            <param name="type">int value for the type.</param>
            <param name="id">the id.</param>
            <param name="user">the user.</param>
            <param name="mode">Int value of the required AccesMode.</param>
        </member>
        <member name="M:Avanteam.Application.Security.DataSource.SecurityDataSource.AccessRightsReplace(System.Int32,System.String,System.Collections.Generic.List{Avanteam.Application.Security.AccessRight})">
            <summary>
            Update or create the accessRights table for this id and type.
            </summary>
            <param name="type">The type of object.</param>
            <param name="id">Unique id  of th etarget object.</param>
            <param name="accessRights">List of accessRights to apply.</param>
        </member>
        <member name="P:Avanteam.Application.Security.DataSource.SecurityDataSource.OrgMode">
            <summary>
            Gets the management mode of the Directory database currently configured:
            0 = No specific rules.
            1 = Multi company mode.
            2 = SaaS mode.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.Components.Authentication">
            <summary>
            Definit quel type d'identifiant est autorisé.
            </summary>
        </member>
        <member name="F:Avanteam.Directory.Components.Authentication.All">
            <summary>
            Plus de variantes de noms et moins de sécurité (dn_name, loginname, email). Valeur par défaut.
            </summary>
        </member>
        <member name="F:Avanteam.Directory.Components.Authentication.Email">
            <summary>
            seul l'attribut e-mail est autorisé comme identifiant.
            </summary>
        </member>
        <member name="F:Avanteam.Directory.Components.Authentication.Fullname">
            <summary>
            seul le dn_name est autorisé comme identifiant.
            </summary>
        </member>
        <member name="F:Avanteam.Directory.Components.Authentication.LoginName">
            <summary>
            seul l'attribut loginname est autorisé comme identifiant.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.Components.AuthenticationIIdentityExtensions">
            <summary>
            Extensions methods for <see cref="T:System.Security.Principal.IIdentity"/> related to our authentication rules.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.Components.AuthenticationIIdentityExtensions.GetAuthenticatedIdp(System.Security.Principal.IIdentity)">
            <summary>
            Gets the name of the IDP which has been used to authenticate the user.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.Components.AuthenticationIIdentityExtensions.CanLogout(System.Security.Principal.IIdentity,Avanteam.Directory.DataSource.IIdentityProvidersManager,Avanteam.Directory.Components.AuthenticationMethod)">
            <summary>
            Determine if we should be able to log out or not.
            The rule is that we should be able to log out if it will be possible to
            change of user and not be auto-reconnected.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.Components.AuthenticationIIdentityExtensions.CanUseFederationProtocol(System.Security.Principal.IIdentity)">
            <summary>
            Return a value indicate if authentication method can use federation protocol.
            </summary>
            <remarks>Federation protocols are SAML, OIDC, OAuth etc ...</remarks>
        </member>
        <member name="T:Avanteam.Directory.Components.IdentityProviders.Saml.XCertificate">
            <summary>
            Entity that mimic the NetCore Certificate entity of ComponentSpace but that :
            - Support XML serialization at a format compatible with legacy NetFramework entity of
            ComponentSpace.
            - Can be used in NetCore and in NetFramework, so every parts of our code can read the conf.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.Components.IdentityProviders.Saml.XPartnerIdentityProviderConfiguration">
            <summary>
            Entity that mimic the NetCore PartnerIdentityProviderConfiguration entity of ComponentSpace
            but that :
            - Support XML serialization at a format compatible with legacy NetFramework entity of
            ComponentSpace.
            - Can be used in NetCore and in NetFramework, so every parts of our code can read the conf.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.Components.IdentityProviders.Saml.XPartnerProviderConfiguration">
            <summary>
            Entity that mimic the NetCore PartnerProviderConfiguration entity of ComponentSpace but that :
            - Support XML serialization at a format compatible with legacy NetFramework entity of
            ComponentSpace.
            - Can be used in NetCore and in NetFramework, so every parts of our code can read the conf.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.Components.IdentityProviders.Saml.XProviderConfiguration">
            <summary>
            Entity that mimic the NetCore ProviderConfiguration entity of ComponentSpace but that :
            - Support XML serialization at a format compatible with legacy NetFramework entity of
            ComponentSpace.
            - Can be used in NetCore and in NetFramework, so every parts of our code can read the conf.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.Components.IdentityProviders.Saml.XSamlMappingRule">
            <summary>
            Entity that mimic the NetCore SamlMappingRule entity of ComponentSpace but that :
            - Support XML serialization at a format compatible with legacy NetFramework entity of
            ComponentSpace.
            - Can be used in NetCore and in NetFramework, so every parts of our code can read the conf.
            </summary>
        </member>
        <member name="F:Avanteam.Directory.Components.IdentityProviders.SerializationStyle.Storage">
            <summary>
            A style of serialization that is suitable for storage.
            </summary>
        </member>
        <member name="F:Avanteam.Directory.Components.IdentityProviders.SerializationStyle.Display">
            <summary>
            A style of serialization that is suitable for display to a human.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.Components.ImageUtils.FixRotation(System.Drawing.Image)">
            <summary>
            Si l'image contient des informations EXIF de rotation de l'image, on les applique à l'image.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DirectoryManagerDS">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSApplication">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSApplication.ApplicationACLDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSApplication.AccessRightsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSApplication.ApplicationACLRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSApplication.AccessRightsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSApplication.ApplicationACLRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSApplication.AccessRightsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSApplicationTableAdapters.ApplicationACLTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSApplicationTableAdapters.AccessRightsTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSChanges">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSChanges.DirectoryChangesDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSChanges.DirectoryChangesRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSChanges.DirectoryChangesRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSChangesTableAdapters.DirectoryChangesTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSChangesTableAdapters.OracleDirectoryChangesTableAdapter">
            <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDelegation">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDelegation.DelegationsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDelegation.DelegationDelegatesDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDelegation.DelegationTargetsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDelegation.DelegationsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDelegation.DelegationDelegatesRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDelegation.DelegationTargetsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDelegation.DelegationsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDelegation.DelegationDelegatesRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDelegation.DelegationTargetsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDelegationTableAdapters.DelegationsTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDelegationTableAdapters.DelegationDelegatesTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDelegationTableAdapters.DelegationTargetsTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSets.DSDirectory.SetAttribute(Avanteam.Directory.DataSets.DSDirectory.DirectoryResourceAttributesDataTable,System.String,System.String,System.DateTime)">
            <summary>
            Enregister un attribut date en string (yyyy-MM-dd).
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSets.DSDirectory.SetAttribute(Avanteam.Directory.DataSets.DSDirectory.DirectoryResourceAttributesDataTable,System.String,System.String,System.String)">
            <summary>
            Enregistrer un attribut.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSets.DSDirectory.GetAttribute(Avanteam.Directory.DataSets.DSDirectory.DirectoryResourceAttributesDataTable,System.String)">
            <summary>
            Retourne la valeur d'un attribut.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryResourcesDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryResourceAttributesDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryRelationsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryFiltersDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryParametersDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryResourceDefinitionsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryResourceLocksDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryResourcesRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryResourceAttributesRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryRelationsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryFiltersRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryParametersRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryResourceDefinitionsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryResourceLocksRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryResourcesRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryResourceAttributesRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryRelationsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryFiltersRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryParametersRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryResourceDefinitionsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectory.DirectoryResourceLocksRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectoryTableAdapters.DirectoryResourcesTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectoryTableAdapters.DirectoryResourceAttributesTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectoryTableAdapters.DirectoryRelationsTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectoryTableAdapters.DirectoryFiltersTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectoryTableAdapters.DirectoryParametersTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectoryTableAdapters.DirectoryResourceDefinitionsTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSDirectoryTableAdapters.DirectoryResourceLocksTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSLicence">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSRelations">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSRelations.DefinitionsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSRelations.DefinitionsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.DSRelations.DefinitionsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.RelationDS">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.RelationDS.ParentDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.RelationDS.ChildDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.RelationDS.ParentRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.RelationDS.ChildRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.RelationDS.ParentRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.RelationDS.ChildRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.RolesPersonsDS">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.RolesPersonsDS.RolesDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.RolesPersonsDS.PersonsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.RolesPersonsDS.RolesRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.RolesPersonsDS.PersonsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.RolesPersonsDS.RolesRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSets.RolesPersonsDS.PersonsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avanteam.Directory.DataSource.DirectoryManagerWrapper"/> class.
            Default Constructor: use the provider &amp; connection string declared in App.config or Web.config.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.GetPersonsInRole(System.String)">
            <summary>
            Get an Array of all persons having this role.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.GetAllPersons0">
            <summary>
            Get a DataSet containing all defined Persons in the organization (use carefully).
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.GetResource(System.String,System.String)">
            <summary>
            Get a Resource (retrieve it by this key / value).
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.IsUserInRole(System.String,System.String)">
            <summary>
            Get a boolean that indicates if the user has the specified role.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.GetServiceLeaders(System.String)">
            <summary>
            Return a collection of Leaders for the required service (use the Manager relation).
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.GetServicePropagationMode">
            <summary>
            Returns the parametered Service Propagation Mode (in the web.config file).
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.GetPersonServices(System.String)">
            <summary>
            Return a collection of all services to witch a person belongs (use the Member relation).
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.GetDistributionGroupMembers(System.String)">
            <summary>
            Returns user members of distribution group.
            </summary>
            <param name="groupDnName">Distribution group distinguish name.</param>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.GetResourceType(System.String)">
            <summary>
            Returns the type of resource.
            </summary>
            <param name="dnName">Distinguish name.</param>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.TryGetResource(System.String)">
            <summary>
            Try to get a resource.
            1st: As a database resource with key = dn_name or loginname or email (and not cn_name anymore!)
            2nd: Browse each ldap/ad resource types as dn_name / cn_name
            return null if not found.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.GetResourceByKey(System.String,System.String)">
             <summary>
             Get a resource with the specified key.
            
             1st: As a database resource
             2nd: As a ldap/ad resource (browse resource definitions)
             return null if not found.
             </summary>
             <param name="keyName">One of dn_name/cn_name.</param>
             <param name="keyValue">value of the key.</param>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.APSGetResourceByKey(System.String,System.String)">
            <summary>
            Get a resource in database by key/value.
            </summary>
            <param name="keyName">name of the key (dn_name).</param>
            <param name="keyValue">value of the key.</param>
            <returns>A dataset that contains 0 or 1 row.</returns>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.LoadServices2">
            <summary>
            Returns the list of "service" resources.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.LoadRoles">
            <summary>
            Returns the list of "role" resources.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.GetDirectoryResourceInfos(System.Collections.Generic.IEnumerable{System.String},Avanteam.Directory.DataSource.GetDirectoryResourceInfosOptions)">
            <summary>
            Returns base information (FullName and DisplayName) of a list of resources from their DN.
            </summary>
            <param name="fullNames">List of resource credentials (fullname).</param>
            <param name="option">Oprions on the behaviour.</param>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.GetDirectoryResourceInfos(System.String,Avanteam.Directory.DataSource.GetDirectoryResourceInfosOptions)">
            <summary>
            Retourne les infos de base (FullName et DisplayName) d'une ressource.
            </summary>
            <param name="fullName">identifiant (fullname) d'une ressource.</param>
            <param name="option">options de comportement.</param>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.LoadResource2(System.String)">
            <summary>
            Retourne la liste des ressources correspondant au type passé en paramètre.
            </summary>
            <param name="type">le nom du type (parmi les types définis dans DirectoryResourceDefinitions).</param>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.GetBoolParameter(System.String,System.Boolean)">
            <summary>
            Get the boolean value of a directory parameter (DirectoryParameters DBTable).
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.GetStringParameter(System.String,System.String)">
            <summary>
            Get the string value of a directory parameter (DirectoryParameters DBTable).
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.GetUserEMail(System.String)">
            <summary>
            Get the email address of a user(any resource)
            userName is dn.
            </summary>
            <returns>Null if not found.</returns>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.GetPasswordResetToken(System.String,System.Nullable{System.DateTime})">
            <summary>
            Gets the password reset token for the user.
            </summary>
            <param name="userId">User ID (Primary Key).</param>
            <param name="endDate">End of validity of the token.</param>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.GetDelegates(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Gets actif delegates of a person.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.GetSubstitutesOf(System.String)">
            <summary>
            Liste des remplaçants actifs pour une personne (status=1, type=T, start_date=null ou &lt;= Now, end_date=null ou > Now).
            </summary>
            <returns>La liste de ses remplaçants.</returns>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.GetSubstitutesOf(System.String,System.String)">
            <summary>
            Liste des remplaçants actifs pour une personne (status=1, send_mail=1, start_date=null ou &lt;= Now, end_date=null ou > Now).
            </summary>
            <returns>La liste de ses remplaçants.</returns>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.GetDelegateesOf(System.String)">
            <summary>
            Liste des délégués permanents pour une personne (status=1, send_mail=0, start_date=null, end_date=null).
            </summary>
            <param name="name">nom de la personne.</param>
            <returns>La liste de ses délégués permanents.</returns>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.LoadDirectoryChanges">
            <summary>
            Loads the directory changes.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryManagerWrapper.UpdateDirectoryChanges(Avanteam.Directory.DataSets.DSChanges)">
            <summary>
            Updates the directory changes.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSource.DirectoryResourceInfo">
            <summary>
            Représente une resource du Directory. Ne contient que son FullName et son DisplayName.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryResourceInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avanteam.Directory.DataSource.DirectoryResourceInfo"/> class.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryResourceInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avanteam.Directory.DataSource.DirectoryResourceInfo"/> class.
            </summary>
        </member>
        <member name="P:Avanteam.Directory.DataSource.DirectoryResourceInfo.FullName">
            <summary>
            Gets the full name of the resource.
            </summary>
        </member>
        <member name="P:Avanteam.Directory.DataSource.DirectoryResourceInfo.DisplayName">
            <summary>
            Gets the display name (CN).
            </summary>
        </member>
        <member name="P:Avanteam.Directory.DataSource.DirectoryResourceInfo.Id">
            <summary>
            Gets the id of the resource.
            </summary>
        </member>
        <member name="P:Avanteam.Directory.DataSource.DirectoryTool.OrgMode">
            <summary>
            Mode de gestion de la base Organisation actuellement configuré
            0 = Pas de règles particulières
            1 = Mode multi-société
            2 = Mode SAAS.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryTool.IsAdministrator(Avanteam.Application.Security.User,System.String,System.String,System.String)">
            <summary>
            Indique si l'utilisateur est administrateur ou "gestionnaire" dans le contexte actuel
            (sur le serveur, l'application, le navigateur, la vue ou le formulaire...)
            </summary>
            <param name="user">l'utilisateur.</param>
            <param name="nav">[optionnel] le navigateur en cours.</param>
            <param name="view">[optionnel] la vue en cours.</param>
            <param name="frm">[optionnel] le formulaire en cours.</param>
        </member>
        <member name="M:Avanteam.Directory.DataSource.DirectoryTool.IsManager(Avanteam.Application.Security.User,System.String)">
            <summary>
            Indique si l'utilisateur est gestionnaire de l'objet dont le nom est passé en paramètre.
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSource.GetDirectoryResourceInfosOptions">
            <summary>
            Options de la méthode GetDirectoryResourceInfos de la classe DirectoryManagerWrapper.
            </summary>
        </member>
        <member name="F:Avanteam.Directory.DataSource.GetDirectoryResourceInfosOptions.RemoveNotFoundEntries">
            <summary>
            Les fullNames passés en paramètre ne correspondant à aucune ressource seront ignorés.
            </summary>
        </member>
        <member name="F:Avanteam.Directory.DataSource.GetDirectoryResourceInfosOptions.KeepNotFoundEntriesWithDisplayNameAsNull">
            <summary>
            Un DirectoryResourceInfos sera retourné même si le fullName ne correspond à aucune ressource, mais sa propriété DisplayName sera null.
            </summary>
        </member>
        <member name="F:Avanteam.Directory.DataSource.GetDirectoryResourceInfosOptions.KeepNotFoundEntriesWithDisplayNameAsFullName">
            <summary>
            Un DirectoryResourceInfos sera retourné même si le fullName ne correspond à aucune ressource, mais sa propriété DisplayName sera égale au FullName.
            </summary>
        </member>
        <member name="P:Avanteam.Directory.DataSource.Mapping.DirectoryAttribute.IsValid">
            <summary>
            Is this resource valid (initialized).
            </summary>
        </member>
        <member name="T:Avanteam.Directory.DataSource.Mapping.Resource">
            <summary>
            Represent a resource from a DataSet.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.DataSource.Mapping.Resource.Fill(System.Data.DataRow)">
            <summary>
            Fill a DataRow with this Resource.
            </summary>
        </member>
        <member name="P:Avanteam.Directory.DataSource.Mapping.Resource.IsRole">
            <summary>
            Is this resource a Role.
            </summary>
        </member>
        <member name="P:Avanteam.Directory.DataSource.Mapping.Resource.IsActor">
            <summary>
            Is this resource an Actor.
            </summary>
        </member>
        <member name="P:Avanteam.Directory.DataSource.Mapping.Resource.IsPerson">
            <summary>
            Is this resource a Person.
            </summary>
        </member>
        <member name="P:Avanteam.Directory.DataSource.Mapping.Resource.IsGroup">
            <summary>
            Is this resource a Group.
            </summary>
        </member>
        <member name="P:Avanteam.Directory.DataSource.Mapping.Resource.DisplayName">
            <summary>
            Get a displayable name for this resource.
            </summary>
        </member>
        <member name="P:Avanteam.Directory.DataSource.Mapping.Resource.FullName">
            <summary>
            Get the full name of th eresource (dn_name).
            </summary>
        </member>
        <member name="P:Avanteam.Directory.DataSource.Mapping.Resource.IsValid">
            <summary>
            Is this resource valid (initialized).
            </summary>
        </member>
        <member name="F:Avanteam.Directory.Keywords.CST_TABLENAME_RELATIONS">
            <summary>
            Table DirectoryRelations.
            </summary>
        </member>
        <member name="F:Avanteam.Directory.Keywords.CST_TABLENAME_RESOURCES">
            <summary>
            Table DirectoryResources.
            </summary>
        </member>
        <member name="F:Avanteam.Directory.Keywords.CST_COLUMNNAME_RELATION_FROM">
            <summary>
            SQL Keyword "from".
            </summary>
        </member>
        <member name="F:Avanteam.Directory.Keywords.CST_RESOURCETYPE_PERSON">
            <summary>
            Resource "user".
            </summary>
        </member>
        <member name="F:Avanteam.Directory.Keywords.CST_RESOURCETYPE_ROLE">
            <summary>
            Resource "role".
            </summary>
        </member>
        <member name="F:Avanteam.Directory.Keywords.CST_RESOURCETYPE_ACTOR">
            <summary>
            Resource "actor".
            </summary>
        </member>
        <member name="F:Avanteam.Directory.Keywords.CST_RESOURCETYPE_GROUP">
            <summary>
            Resource "group".
            </summary>
        </member>
        <member name="F:Avanteam.Directory.Keywords.CST_RESOURCETYPE_SERVICE">
            <summary>
            Resource "service".
            </summary>
        </member>
        <member name="F:Avanteam.Directory.Keywords.CST_RESOURCETYPE_PROFILE">
            <summary>
            Resource "profile".
            </summary>
        </member>
        <member name="F:Avanteam.Directory.Keywords.CST_PROPERTYVALUE_ROLE">
            <summary>
            Resource "role".
            </summary>
        </member>
        <member name="F:Avanteam.Directory.Keywords.CST_RELATIONNAME_ROLE">
            <summary>
            Relation "Roles".
            </summary>
        </member>
        <member name="F:Avanteam.Directory.Keywords.CST_RELATIONNAME_PROFILE">
            <summary>
            Relation "Profiles".
            </summary>
        </member>
        <member name="F:Avanteam.Directory.Keywords.CST_RESOURCE_COLUMN_TYPE">
            <summary>
            Column "type" of table "DirectoryResource".
            </summary>
        </member>
        <member name="F:Avanteam.Directory.Keywords.ATTNAME_PDFTOOL">
            <summary>
            Attribute "PDFTool".
            </summary>
        </member>
        <member name="T:Avanteam.Directory.Licence.UserLicencesDataSource">
            <summary>
            Accède à toutes les tables LicenceUsers des applications et de la base directory.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.Licence.UserLicencesDataSource.#ctor(Avanteam.Kernel.DataSource.ApplicationProfile)">
            <summary>
            Initializes a new instance of the <see cref="T:Avanteam.Directory.Licence.UserLicencesDataSource"/> class.
            </summary>
        </member>
        <member name="P:Avanteam.Directory.Licence.UserLicencesDataSource.DirectoryDataSource">
            <summary>
            Directory connector.
            </summary>
        </member>
        <member name="P:Avanteam.Directory.Licence.UserLicencesDataSource.ApplicationDataSources">
            <summary>
            All application connectors.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.Licence.UserLicencesDataSource.DeleteUserLicences(System.String)">
            <summary>
            Delete user licences for all applications and directory.
            </summary>
            <param name="dnName">User distinguished name.</param>
        </member>
        <member name="F:Avanteam.Directory.OrgMode.Standard">
            <summary>
            Mode standard.
            </summary>
        </member>
        <member name="F:Avanteam.Directory.OrgMode.MultiCompany">
            <summary>
            Mode multi-société.
            </summary>
        </member>
        <member name="F:Avanteam.Directory.OrgMode.Saas">
            <summary>
            Mode SaaS.
            </summary>
        </member>
        <member name="P:Avanteam.Directory.Shared.TriggerSociete.UpdateRelationSociete">
            <summary>
            Permet d'indiquer la mise à jour ou non des relations UserSociete et Service Societe à l'aide de la class <see cref="T:Avanteam.Directory.Shared.TriggerSociete"/>.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.Shared.TriggerSociete.IsSociete(System.String)">
            <summary>
            Test si le service est une société.
            </summary>
            <param name="service">dn du service.</param>
        </member>
        <member name="M:Avanteam.Directory.Shared.TriggerSociete.GetSocieteForService(System.String)">
            <summary>
            Retourne le dn de la société liée (DirectoryRelation 'ServiceSociete') au service (dn).
            </summary>
            <param name="service">dn du service.</param>
        </member>
        <member name="M:Avanteam.Directory.Shared.TriggerSociete.Rebuild_PopulateService(System.String)">
            <summary>
            Affecte à tous les services descendant la relation à la société du service parent.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.Shared.TriggerSociete.RebuildServiceSociete">
            <summary>
            Supprime les sociétés non liées à un service
            Créer la société (cn=cnService, dn=SOC_dnservice)suite à la création de l'attribut 'societe'='1' sur un service
            Supprime les relations servicesociete suite à la suppression de la ressource société ou modification de la hiérarchie des services
            Supprimer les relation UserAdminOrgaSociete suite à la suppression de la ressource société ou modification de la hiérarchie des services
            Créer les relations servicesociete suite à la création de la ressource société ou modification de la hiérarchie des services.
            </summary>
        </member>
        <member name="M:Avanteam.Directory.Shared.TriggerSociete.RebuildUserSociete">
             <summary>
             Supprimer les relations usersociete
                 quand l'utilisateur a été supprimé
                 quand le service n'est plus une société
                 quand il y a des doublons de relations !
            
                 quand une reltion user-service est supprimée.
             </summary>
        </member>
    </members>
</doc>
