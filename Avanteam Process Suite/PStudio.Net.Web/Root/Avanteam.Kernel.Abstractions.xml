<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Avanteam.Kernel.Abstractions</name>
    </assembly>
    <members>
        <member name="M:Avanteam.Kernel.Collections.GenericCollection`1.Convert(System.Collections.Generic.List{`0})">
            <summary>
            Conversion from List to GenericCollection
            NB : return value is a copy.
            </summary>
        </member>
        <member name="P:Avanteam.Kernel.Collections.IReadOnlyIndexedCollection`2.Item(`0)">
            <summary>
            Gets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get.</param>
            <returns>
            The element with the specified key.
            If an element with the specified key is not found, an exception is thrown.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            An element with the specified key does not exist in the collection.
            </exception>
        </member>
        <member name="P:Avanteam.Kernel.Configuration.IApsInstance.RootDir">
            <summary>
            Get the root directory where the instance is installed.
            </summary>
        </member>
        <member name="P:Avanteam.Kernel.Configuration.IApsInstance.ConfigDir">
            <summary>
            Gets the path to the directory that contains configuration files.
            This is the "PStudio.Configuration" directory in current version.
            </summary>
        </member>
        <member name="P:Avanteam.Kernel.DataSource.ApplicationProfile.Properties">
            <summary>
            Gets a collection of all properties.
            </summary>
        </member>
        <member name="M:Avanteam.Kernel.DataSource.ApplicationProfile.GetConnection(System.String)">
            <summary>
            Gets a data source connection.
            </summary>
            <param name="dataSourceName">Name of the datasource.</param>
            <returns>Connection of the datasource or null.</returns>
        </member>
        <member name="P:Avanteam.Kernel.DataSource.Connection.Name">
            <summary>
            Gets or sets the name of this connection.
            </summary>
        </member>
        <member name="P:Avanteam.Kernel.DataSource.Connection.ConnectionString">
            <summary>
            Gets or sets a ConnectionString for this connection.
            </summary>
        </member>
        <member name="M:Avanteam.Kernel.DataSource.ConnectionTypeExtensions.GetProviderName(Avanteam.Kernel.DataSource.ConnectionType)">
            <summary>
            Returns the corresponding ADO.NET provider name.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the value of the <paramref name="connectionType"/> is not known.
            </exception>
        </member>
        <member name="M:Avanteam.Kernel.DataSource.ConnectionTypeExtensions.GetConnectionType(System.Configuration.ConnectionStringSettings)">
            <summary>
            Returns the <see cref="T:Avanteam.Kernel.DataSource.ConnectionType"/> corresponding to the AD.NET provider name of
            this connection string settings.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the provider name is not known.
            </exception>
        </member>
        <member name="M:Avanteam.Kernel.DataSource.ConnectionTypeExtensions.GetConnectionType(System.String)">
            <summary>
            Returns the <see cref="T:Avanteam.Kernel.DataSource.ConnectionType"/> corresponding to the given ADO.NET provider name.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the provider name is not known.
            </exception>
        </member>
        <member name="M:Avanteam.Kernel.DataSource.ConnectionTypeExtensions.TryGetDbProviderFactory(Avanteam.Kernel.DataSource.ConnectionType,System.Data.Common.DbProviderFactory@)">
            <summary>
            Try to get the corresponding <see cref="T:System.Data.Common.DbProviderFactory"/> instance.
            This may fail if <see cref="T:System.Data.Common.DbProviderFactories"/> is not filled, which
            may happen in design time scenarios.
            </summary>
        </member>
        <member name="T:Avanteam.Kernel.DataSource.DbConnectionDescriptor">
            <summary>
            A validated and read-only representation of a <see cref="T:Avanteam.Kernel.DataSource.Connection"/>.
            </summary>
        </member>
        <member name="P:Avanteam.Kernel.DependencyInjection.IApsAppBuilder.Configuration">
            <summary>
            Gets a collection of configuration providers for the application to compose.
            This is useful for adding new configuration sources and providers.
            </summary>
        </member>
        <member name="P:Avanteam.Kernel.DependencyInjection.IApsAppBuilder.ConfigurationRoot">
            <summary>
            Gets the root configuration. This can be used to configure aspects that will
            need a reboot of the application to be changed.
            </summary>
        </member>
        <member name="P:Avanteam.Kernel.DependencyInjection.IApsAppBuilder.Services">
            <summary>
            Gets a collection of services for the application to compose.
            This is useful for adding user provided or framework provided services.
            </summary>
        </member>
        <member name="P:Avanteam.Kernel.DependencyInjection.ICurrentScopedServiceProviderAccessor.CurrentScopedServiceProvider">
            <summary>
            Gets the service provider corresponding to the current service scope,
            or null if we are not in a non root service scope.
            </summary>
        </member>
        <member name="T:Avanteam.Kernel.DependencyInjection.ServiceLocator">
            <summary>
            Static exposition of the <see cref="T:System.IServiceProvider"/>.
            </summary>
            <remarks>
            ServiceLocator is considered as an Anti-Pattern, so try to avoid to use it
            as much as possible. It must be use only when refactoring of legacy code
            for which pure dependency injection is hard to achieve.
            </remarks>
        </member>
        <member name="P:Avanteam.Kernel.DependencyInjection.ServiceLocator.RootServices">
            <summary>
            Gets or sets the root service provider.
            </summary>
        </member>
        <member name="P:Avanteam.Kernel.DependencyInjection.ServiceLocator.Services">
            <summary>
            Gets or sets the current service provider, which could be the one from the current scope,
            if current scope is tracked by an <see cref="T:Avanteam.Kernel.DependencyInjection.ICurrentScopedServiceProviderAccessor"/>
            implementation, or the root service provider if we are not in a tracked scope.
            </summary>
        </member>
        <member name="P:Avanteam.Kernel.Log.ILogger.IsTraceEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Trace</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Trace</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:Avanteam.Kernel.Log.ILogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Debug</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Debug</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:Avanteam.Kernel.Log.ILogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Info</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Info</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:Avanteam.Kernel.Log.ILogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Warn</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Warn</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:Avanteam.Kernel.Log.ILogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Error</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Error</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:Avanteam.Kernel.Log.ILogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Fatal</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Fatal</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="M:Avanteam.Kernel.Log.ILogger.TraceException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:Avanteam.Kernel.Log.ILogger.Trace(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:Avanteam.Kernel.Log.ILogger.Trace(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:Avanteam.Kernel.Log.ILogger.DebugException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:Avanteam.Kernel.Log.ILogger.Debug(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:Avanteam.Kernel.Log.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:Avanteam.Kernel.Log.ILogger.InfoException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:Avanteam.Kernel.Log.ILogger.Info(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:Avanteam.Kernel.Log.ILogger.Info(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:Avanteam.Kernel.Log.ILogger.WarnException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:Avanteam.Kernel.Log.ILogger.Warn(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:Avanteam.Kernel.Log.ILogger.Warn(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:Avanteam.Kernel.Log.ILogger.ErrorException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:Avanteam.Kernel.Log.ILogger.Error(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:Avanteam.Kernel.Log.ILogger.Error(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:Avanteam.Kernel.Log.ILogger.FatalException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:Avanteam.Kernel.Log.ILogger.Fatal(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:Avanteam.Kernel.Log.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="T:Avanteam.Kernel.Mail.AttachmentDescriptor">
            <summary>
            Class that describe a file to attach to an email.
            </summary>
        </member>
        <member name="M:Avanteam.Kernel.Mail.AttachmentDescriptor.FromFile(System.String)">
            <summary>
            Create an <see cref="T:Avanteam.Kernel.Mail.AttachmentDescriptor"/> that correspond to a
            file on the file system.
            </summary>
            <param name="filePath">The path to the file on the file system.</param>
        </member>
        <member name="M:Avanteam.Kernel.Mail.AttachmentDescriptor.FromByteArray(System.Byte[],System.String)">
            <summary>
            Create an <see cref="T:Avanteam.Kernel.Mail.AttachmentDescriptor"/> that correspond to a
            binary file which reside in memory.
            </summary>
            <param name="fileContent">The binary content of the file.</param>
            <param name="fileName">The name of the file.</param>
        </member>
        <member name="M:Avanteam.Kernel.Mail.AttachmentDescriptor.FromString(System.String,System.String)">
            <summary>
            Create an <see cref="T:Avanteam.Kernel.Mail.AttachmentDescriptor"/> that correspond to a
            text file which reside in memory.
            The resulting binary will be UTF-8 without BOM.
            </summary>
            <param name="fileContent">The string content of the file.</param>
            <param name="fileName">The name of the file.</param>
        </member>
        <member name="P:Avanteam.Kernel.Mail.AttachmentDescriptor.FileName">
            <summary>
            Gets the file name (with extension and without path) corresponding
            to this attachment.
            </summary>
        </member>
        <member name="M:Avanteam.Kernel.Mail.AttachmentDescriptor.GetContentStream">
            <summary>
            Create a <see cref="T:System.IO.Stream"/> corresponding to the content of this
            attachment.
            </summary>
        </member>
        <member name="T:Avanteam.Kernel.Mail.IMailFormatter">
            <summary>
            Interface that represent a mail formatter.
            A mail formatter is a class that allow to replace tokens in a mail
            template before sending it.
            </summary>
        </member>
        <member name="M:Avanteam.Kernel.Mail.ISendMailService.Send(Avanteam.Kernel.Mail.MailTemplate,System.Int32)">
            <summary>
            Envoi des mails par lots de destinataires en mode synchrone.
            </summary>
            <param name="mail">le mail à envoyer.</param>
            <param name="maxRecipients">Nombre de destinataires par mail.</param>
        </member>
        <member name="M:Avanteam.Kernel.Mail.ISendMailService.SendAsync(Avanteam.Kernel.Mail.MailTemplate,System.Int32)">
            <summary>
            Envoi des mails par lots de destinataires en mode asynchrone.
            </summary>
            <param name="mail">le mail à envoyer.</param>
            <param name="maxRecipients">Nombre de destinataires par mail.</param>
        </member>
        <member name="E:Avanteam.Kernel.Mail.ISendMailService.MessageSent">
            <summary>
            Evènement lancé quand le mail est envoyé.
            </summary>
        </member>
        <member name="T:Avanteam.Kernel.Mail.MailMessageSentEventArg">
            <summary>
            <see cref="T:System.EventArgs"/> used by <see cref="T:Avanteam.Kernel.Mail.ISendMailService"/> to notify
            mails that have been sent.
            </summary>
        </member>
        <member name="M:Avanteam.Kernel.Mail.MailTemplate.Send(Avanteam.Kernel.Mail.ISendMailService.MailMessageSentHandler,System.Int32)">
            <summary>
            Envoi des mails par lots de destinataires en mode synchrone.
            </summary>
            <param name="mailMessageSentEvent">L'événement à appelé après l'envoi du mail. Can be null.</param>
            <param name="maxRecipients">Nombre de destinataires par mail. Default value = int.MaxValue.</param>
        </member>
        <member name="M:Avanteam.Kernel.Mail.MailTemplate.Send(Avanteam.Kernel.Mail.ISendMailService.MailMessageSentHandler)">
            <summary>
            Envoi des mails par lots de destinataires en mode synchrone.
            </summary>
            <param name="mailMessageSentEvent">L'événement à appelé après l'envoi du mail.</param>
        </member>
        <member name="M:Avanteam.Kernel.Mail.MailTemplate.Send(Avanteam.Kernel.Mail.ISendMailServiceProvider,Avanteam.Kernel.Mail.ISendMailService.MailMessageSentHandler,System.Int32)">
            <summary>
            Envoi des mails par lots de destinataires en mode synchrone.
            </summary>
            <param name="sendMailServiceProvider">Service permettant de résoudre l’obtention du service d’envoi de mails.</param>
            <param name="mailMessageSentEvent">L’événement à appelé après l'envoi du mail. Can be null.</param>
            <param name="maxRecipients">Nombre de destinataires par mail. Default value = int.MaxValue.</param>
        </member>
        <member name="M:Avanteam.Kernel.Mail.MailTemplate.SendAsync(Avanteam.Kernel.Mail.ISendMailService.MailMessageSentHandler,System.Int32)">
            <summary>
            Envoi des mails par lots de destinataires en mode asynchrone.
            </summary>
            <param name="mailMessageSentEvent">L'événement à appelé après l'envoi du mail. Can be null.</param>
            <param name="maxRecipients">Nombre de destinataires par mail. Default value = int.MaxValue.</param>
        </member>
        <member name="M:Avanteam.Kernel.Mail.MailTemplate.SendAsync(Avanteam.Kernel.Mail.ISendMailServiceProvider,Avanteam.Kernel.Mail.ISendMailService.MailMessageSentHandler,System.Int32)">
            <summary>
            Envoi des mails par lots de destinataires en mode asynchrone.
            </summary>
            <param name="sendMailServiceProvider">Service permettant de résoudre l’obtention du service d’envoi de mails.</param>
            <param name="mailMessageSentEvent">L'événement à appelé après l'envoi du mail. Can be null.</param>
            <param name="maxRecipients">Nombre de destinataires par mail. Default value = int.MaxValue.</param>
        </member>
        <member name="M:Avanteam.Kernel.Mail.MailTemplate.SendFireAndForget(Avanteam.Kernel.Mail.ISendMailService.MailMessageSentHandler,System.Boolean,System.Action,System.Action{System.Exception})">
            <summary>
            Envoi d'un e-mail en mode « Fire &amp; Forget ». Attention, ça ne marche que dans le contexte d'un site ASP.Net.
            Si on est dans un autre contexte (winform, console...) l'envoi sera synchrone.
            </summary>
            <param name="mailMessageSentEvent">L'événement à appelé après l'envoi du mail. Can be null.</param>
            <param name="sendAsynchronously">Pour savoir si on peut envoyer depuis un nouveau thread.
            NB : Si on est dans un contexte ASP.Net, il faut être le faire.
            </param>
            <param name="onSuccess">délégué exécuté en cas de réussite de l'envoi.</param>
            <param name="onException">délégué exécuté en cas d'exception lors de l'envoi.</param>
        </member>
        <member name="M:Avanteam.Kernel.Mail.MailTemplate.SendFireAndForget(Avanteam.Kernel.Mail.ISendMailServiceProvider,Avanteam.Kernel.Mail.ISendMailService.MailMessageSentHandler,System.Boolean,System.Action,System.Action{System.Exception})">
            <summary>
            Envoi d'un e-mail en mode « Fire &amp; Forget ». Attention, ça ne marche que dans le contexte d'un site ASP.Net.
            Si on est dans un autre contexte (winform, console...) l'envoi sera synchrone.
            </summary>
            <param name="sendMailServiceProvider">Service permettant de résoudre l’obtention du service d’envoi de mails.</param>
            <param name="mailMessageSentEvent">L'événement à appelé après l'envoi du mail. Can be null.</param>
            <param name="sendAsynchronously">Pour savoir si on peut envoyer depuis un nouveau thread.
            NB : Si on est dans un contexte ASP.Net, il faut être le faire.
            </param>
            <param name="onSuccess">délégué exécuté en cas de réussite de l'envoi.</param>
            <param name="onException">délégué exécuté en cas d'exception lors de l'envoi.</param>
        </member>
        <member name="T:Avanteam.Kernel.Personalization.IUserProfileAccessor">
            <summary>
            Interface that allows to access to the <see cref="T:Avanteam.Kernel.Personalization.IUserProfile"/> of the
            currently authenticated user.
            </summary>
        </member>
        <member name="P:Avanteam.Kernel.Personalization.IUserProfileAccessor.UserProfile">
            <summary>
            Gets the profile of the currently connected user, or null if current user is anonymous.
            </summary>
            <remarks>
            In most web framework (and in particular in ASP.Net) a default instance is often return for
            such concept for anonymous users. But in our case we choose not because we don’t expect to
            have pages accessible by anonymous and connected users, and which display could vary on user
            settings. This happens on e-commerce website, but should not a business application like ours.
            And this make the implementation simpler.
            </remarks>
        </member>
    </members>
</doc>
